Traceback (most recent call last):
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# import libraries
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from time import sleep
import pandas as pd
import datefinder
import calendar
import os
import pytest
import unittest
from random import randint
import PyPDF2
import glob

# driver_path = 'C:/Program Files (x86)/Google/Chrome/Application/chromedriver.exe' #for windows
# driver_path = '/Users/Yanxu/OneDrive/Projects/AgPolicyCoding/chromedriver'
# driver = webdriver.Chrome(executable_path=DRIVER_PATH)

# Change the working directory
os.chdir('/Users/long/OneDrive/Projects/AFRI')
# os.chdir('/Volumes/GoogleDrive/Shared drives/UCSC-UMN AFRI project/Data/GA')
# Get the current working directory
cwd = os.getcwd()
# Print the current working directory
print("Current working directory: {0}".format(cwd))

chromeOptions = webdriver.ChromeOptions()
dnldpath = {"download.default_directory": "/Users/long/OneDrive/Projects/AFRI/data/GA/"}
chromeOptions.add_experimental_option("prefs", dnldpath)
driver = webdriver.Chrome(executable_path='./chromedriver', options=chromeOptions)
driver.get("https://www.legis.ga.gov/legislation/signed-by-governor")
yrs = []
sts = []
seyrs = []
titles = []
bfsums = []
introdts = []
sigdts = []
effdts = []
epddtes = []
introducers = []
txtlks = []
acttxts = []
stas = []
hoscoms = []  # house committee
sponsors = []

sessions = []
urls = []
billnums = []

WebDriverWait(driver, 300).until(
    EC.presence_of_element_located((By.CSS_SELECTOR, "#session > option"))
)
session_list = driver.find_elements_by_css_selector('#session > option')

for index, i in enumerate(session_list):
    WebDriverWait(driver, 300).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "#session > option"))
    )
    session_list = driver.find_elements_by_css_selector('#session > option')
    session_list[index].click()
    session = session_list[index].text
    print(session)

    search_btn = driver.find_element_by_css_selector('button.btn.btn-primary')
    search_btn.click()

    sleep(2)

    try:
        WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'div.noResults'))
        )
        driver.find_element_by_css_selector('div.noResults')
        print("No results found")
    except:
        WebDriverWait(driver, 300).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div.resultCount b:nth-child(2)"))
        )
        total_bills = driver.find_element_by_css_selector('div.resultCount b:nth-child(2)').text

        # total_bills = 40
        if int(total_bills) % 20 == 0:
            total_pages = int(int(total_bills) / 20)
        else:
            total_pages = int(int(total_bills) / 20) + 1
        print(total_pages)

        # temporary setup for developing
        #total_pages = 6

        for page in range(total_pages):
            WebDriverWait(driver, 300).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".text-nowrap"))
            )
            bill_list = driver.find_elements_by_css_selector('.text-nowrap')
            for bill in bill_list:
                url = bill.get_attribute('href')
                urls.append(url)
                billnum = bill.text
                billnums.append(billnum)
                sessions.append(session)
            print("page", page + 1)

            if total_pages > 0:
                WebDriverWait(driver, 300).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, "ul > li:last-child > a > span"))
                )
                next_page = driver.find_element_by_css_selector('ul > li:last-child > a > span')
                try:
                    next_page.click()
                    sleep(1)
                except:
                    print("this session is done for urls")
            else:
                print("this session is done for urls")

for idx, url in enumerate(urls):
    driver.get(url)
    sleep(1)
    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "div.card div.card-body"))
    )
    try:
        bfsum = driver.find_elements_by_css_selector('h2.card-title + div.card-text-sm')[0].text
        #Briefsummary = driver.find_elements_by_css_selector('div.card div.card-body')[1].text
    except:
        bfsum = ''
    bfsums.append(bfsum)

    title = driver.find_element_by_css_selector("div.h1.subHead").text
    titles.append(title)

    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "app-status-history-list div  table tbody"))
    )
    sleep(1)
    ## Status History Dates
    try:
        dates = driver.find_element_by_css_selector('app-status-history-list div  table tbody').text

        if "Senate Date Signed by Governor" in dates:
            sigdt = dates.split("Senate Date Signed by Governor")[0].split("\n")[-1].replace(" ", "")
        else:
            sigdt = dates.split("House Date Signed by Governor")[0].split("\n")[-1].replace(" ", "")
            sigdts.append(sigdt)

        effdt = dates.split(" Effective Date")[0]
        effdts.append(effdt)

        introdt = dates.split("\n")[-1].split(" ")[0]
        introdts.append(introdt)

        yr = effdt.split("/")[2]
        yrs.append(yr)

        '''
        # if (int(yr) % 2) == 0:
            seyr = str(int(yr) - 1) + "-" + str(yr)
        else:
            seyr = str(yr) + str("-") + str(int(yr) + 1)
        '''
    except:
        effdt = ''
        effdts.append(effdt)
        sigdt = ''
        sigdts.append(sigdt)
        introdt = ''
        introdts.append(introdt)
        yr = ''
        yrs.append(yr)

        '''
        seyr =''
        seyrs.append(seyr)
        '''

    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "li.list-inline-item"))
    )
    version_btn = driver.find_elements_by_css_selector('li.list-inline-item')
    version_btn[0].click()

    WebDriverWait(driver, 60).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "div.col-6.justify-content-end.text-right > button"))
    )
    dnldbtn = driver.find_element_by_class_name('btn.btn-outline-primary.btn-sm.mr-2.mb-1')
    dnldbtn.click()

    sleep(randint(1, 2))
    path = "/Users/long/OneDrive/Projects/AFRI/data/GA/"
    list_of_files = glob.glob(os.path.join(path, '*.pdf'))
    latest_file = max(list_of_files, key=os.path.getctime)
    print(latest_file)
    with open(os.path.join(os.getcwd(), latest_file), 'r') as f:  # open in readonly mode
        # creating a pdf File object of original pdf
        pdfFileObj = open(latest_file, 'rb')
        pdfReader = PyPDF2.PdfFileReader(pdfFileObj)
        pagenumber = pdfReader.numPages
        acttxt = []
        pgtxts = []
        for p in range(pagenumber):
            pageObj = pdfReader.getPage(p)
            pgtxt = pageObj.extractText()
            pgtxts.append(pgtxt)
            acttxt = '\n'.join(pgtxts)
    acttxts.append(acttxt)
    st = "GA"
    sts.append(st)

    print(idx + 1)
    # sleep(randint(1, 2))

print("Downloading is finished")

#'sponsors': sponsors
#'HouseCommittees': HouseCommittees,
datasource = pd.DataFrame({
    'Session Year': sessions,
    'Bill Number': billnums,
    'Link to full text': urls
})

datasource = pd.DataFrame({
    'Year': yrs,
    # 'State': sts,
    'Session Year': sessions,
    'Bill Number': billnums,
    'Title': titles,
    'Brief Summary': bfsums,
    # 'Introduced Date': introdts,
    #'Date it was signed':sigdts,
    # 'Date effective':effdts,
    # 'Full Text':acttxts,
    'Link to full text': urls
})

#'House Committee': hoscoms,
# drop duplicates
#datasource.drop_duplicates(subset = ['Bill Number'],
# keep = 'first', inplace = True, ignore_index= True)

# save bill info into excel file
datasource.to_excel('GA_Leginfo.xlsx')
print("Web-scrapting finished")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 12>[0;34m()[0m
[1;32m     10[0m [38;5;28;01mimport[39;00m [38;5;21;01mcalendar[39;00m
[1;32m     11[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[0;32m---> 12[0m [38;5;28;01mimport[39;00m [38;5;21;01mpytest[39;00m
[1;32m     13[0m [38;5;28;01mimport[39;00m [38;5;21;01munittest[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mrandom[39;00m [38;5;28;01mimport[39;00m randint

[0;31mModuleNotFoundError[0m: No module named 'pytest'
ModuleNotFoundError: No module named 'pytest'

