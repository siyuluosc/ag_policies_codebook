Traceback (most recent call last):
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/long/opt/anaconda3/envs/py39/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# import libraries
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from time import sleep
import pandas as pd
import datefinder
import calendar
import os
import pytest
import unittest
from random import randint
import PyPDF2
import glob
import docx
import docx2txt
import requests
from bs4 import BeautifulSoup

# driver_path = 'C:/Program Files (x86)/Google/Chrome/Application/chromedriver.exe' #for windows
# driver_path = '/Users/Yanxu/OneDrive/Projects/AgPolicyCoding/chromedriver'
# driver = webdriver.Chrome(executable_path=DRIVER_PATH)

# Change the working directory
os.chdir('/Users/long/OneDrive/Projects/AFRI')
# os.chdir('/Volumes/GoogleDrive/Shared drives/UCSC-UMN AFRI project/Data/GA')
# Get the current working directory
cwd = os.getcwd()
# Print the current working directory
print("Current working directory: {0}".format(cwd))

# chromeOptions = webdriver.ChromeOptions()
dnldpath = {"download.default_directory": "/Users/long/OneDrive/Projects/AFRI/data/SC/"}
chromeOptions = webdriver.ChromeOptions()
chromeOptions.add_experimental_option('prefs', {
    "download.default_directory": dnldpath,  #Change default directory for downloads
    "download.prompt_for_download": False,  #To auto download the file
    "download.directory_upgrade": True,
    "plugins.always_open_pdf_externally": True,  #It will not show PDF directly in chrome
    "--enable-javascript": True
})
driver = webdriver.Chrome(executable_path='./chromedriver', options=chromeOptions)
driver.get("https://www.scstatehouse.gov/aacts.php")

session_urls = []
urls = []
docurls = []
acttxts = []
titles = []
yrs = []
billnums = []
billnumlist = []
specialyears = ['1995', '1996']
sgurls = []
summarys = []

sessions = driver.find_elements_by_css_selector("div#contentsection a")

for idx, session in enumerate(sessions):
    sessionname = session.text
    if "Excel" in sessionname:
        print(sessionname)
    else:
        session_url = session.get_attribute('href')
        session_urls.append(session_url)
for idx, session_url in enumerate(session_urls):
    driver.get(session_url)
    sleep(1)
    WebDriverWait(driver, 300).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, "h2.barheader"))
    )
    yr = driver.find_element_by_css_selector("h2.barheader").text.rsplit("Acts")[1].rsplit("Session")[0].rsplit(" ")[0]
    if yr in specialyears:
        sessiongroup = driver.find_elements_by_css_selector("div#resultsbox dl dd a")
        for element in sessiongroup:
            sgurl = element.get_attribute('href')
            driver.get(sgurl)
            WebDriverWait(driver, 300).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "div#contentsection"))
            )
            lawlist = driver.find_elements_by_css_selector("div#contentsection dl dt a")
            for element in lawlist:
                url = element.get_attribute('href')
                urls.append(url)
    else:
        WebDriverWait(driver, 300).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div#resultsbox dl dd"))
        )
        lawlist = driver.find_elements_by_xpath('//*[@id="resultsbox"]/ dl / dt / a[1]')
        for element in lawlist:
            url = element.get_attribute('href')
            urls.append(url)

for idx, url in enumerate(urls):
    try:
        driver.get(url)
        WebDriverWait(driver, 300).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "div#resultsbox"))
        )
        summary = driver.find_element_by_css_selector("div#resultsbox").text
    except:
        WebDriverWait(driver, 300).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "body"))
        )
        summary = driver.find_element_by_css_selector("body").text
    # summarys
    summarys.append(acttxt)
    try:
        textloc = driver.find_element_by_css_selector("div.bill-list-item a.nodisplay")
        # docurls
        docurl = textloc.get_attribute('href')
        docurls.append(docurl)
        sleep(2)
        driver.get(docurl)
    except:
        docurls.append(url)
    body = driver.find_element_by_css_selector("body")
    # acttxts
    acttxt = body.text
    acttxts.append(acttxt)

sessions1 = [i.split('Bill')[0] for i in acttxts]
sessions2 = [i.split('Download')[0] for i in sessions1]
sessions = [i.split('\n')[1] for i in sessions2]
datasource = pd.DataFrame({
    #'Year': yrs,
    # 'State': sts,
    'Session Year': sessions,
    #'Bill Number': billnums,
    #'Title': titles,
    #'Brief Summary': summarys,
    # 'Introduced Date': introdts,
    #'Date it was signed':sigdts,
    # 'Date effective':effdts,
    'Full Text': acttxts,
    'Link to full text': docurls,
    'Link to bill': urls
})

datasource.to_excel('SC_Leginfo.xlsx')
datasource.to_csv('SC_Leginfo.csv')
print("Web-scrapting finished")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<cell line: 12>[0;34m()[0m
[1;32m     10[0m [38;5;28;01mimport[39;00m [38;5;21;01mcalendar[39;00m
[1;32m     11[0m [38;5;28;01mimport[39;00m [38;5;21;01mos[39;00m
[0;32m---> 12[0m [38;5;28;01mimport[39;00m [38;5;21;01mpytest[39;00m
[1;32m     13[0m [38;5;28;01mimport[39;00m [38;5;21;01munittest[39;00m
[1;32m     14[0m [38;5;28;01mfrom[39;00m [38;5;21;01mrandom[39;00m [38;5;28;01mimport[39;00m randint

[0;31mModuleNotFoundError[0m: No module named 'pytest'
ModuleNotFoundError: No module named 'pytest'

